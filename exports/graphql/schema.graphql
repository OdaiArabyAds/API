input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type Banner {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  slug: String
  name: String
  items: [ComponentVariantsItems]
}

type BannerConnection {
  values: [Banner]
  groupBy: BannerGroupBy
  aggregate: BannerAggregator
}

type BannerAggregator {
  count: Int
  totalCount: Int
}

type BannerGroupBy {
  id: [BannerConnectionId]
  created_at: [BannerConnectionCreated_at]
  updated_at: [BannerConnectionUpdated_at]
  slug: [BannerConnectionSlug]
  name: [BannerConnectionName]
}

type BannerConnectionId {
  key: ID
  connection: BannerConnection
}

type BannerConnectionCreated_at {
  key: DateTime
  connection: BannerConnection
}

type BannerConnectionUpdated_at {
  key: DateTime
  connection: BannerConnection
}

type BannerConnectionSlug {
  key: String
  connection: BannerConnection
}

type BannerConnectionName {
  key: String
  connection: BannerConnection
}

input BannerInput {
  slug: String
  name: String
  items: [ComponentVariantsItemInput]
  created_by: ID
  updated_by: ID
}

input editBannerInput {
  slug: String
  name: String
  items: [editComponentVariantsItemInput]
  created_by: ID
  updated_by: ID
}

input createBannerInput {
  data: BannerInput
}

type createBannerPayload {
  banner: Banner
}

input updateBannerInput {
  where: InputID
  data: editBannerInput
}

type updateBannerPayload {
  banner: Banner
}

input deleteBannerInput {
  where: InputID
}

type deleteBannerPayload {
  banner: Banner
}

type Brand {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  slug: String
  products(sort: String, limit: Int, start: Int, where: JSON): [Product]
}

type BrandConnection {
  values: [Brand]
  groupBy: BrandGroupBy
  aggregate: BrandAggregator
}

type BrandAggregator {
  count: Int
  totalCount: Int
}

type BrandGroupBy {
  id: [BrandConnectionId]
  created_at: [BrandConnectionCreated_at]
  updated_at: [BrandConnectionUpdated_at]
  name: [BrandConnectionName]
  slug: [BrandConnectionSlug]
}

type BrandConnectionId {
  key: ID
  connection: BrandConnection
}

type BrandConnectionCreated_at {
  key: DateTime
  connection: BrandConnection
}

type BrandConnectionUpdated_at {
  key: DateTime
  connection: BrandConnection
}

type BrandConnectionName {
  key: String
  connection: BrandConnection
}

type BrandConnectionSlug {
  key: String
  connection: BrandConnection
}

input BrandInput {
  name: String
  slug: String
  products: [ID]
  created_by: ID
  updated_by: ID
}

input editBrandInput {
  name: String
  slug: String
  products: [ID]
  created_by: ID
  updated_by: ID
}

input createBrandInput {
  data: BrandInput
}

type createBrandPayload {
  brand: Brand
}

input updateBrandInput {
  where: InputID
  data: editBrandInput
}

type updateBrandPayload {
  brand: Brand
}

input deleteBrandInput {
  where: InputID
}

type deleteBrandPayload {
  brand: Brand
}

type Collection {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  slug: String
  products(sort: String, limit: Int, start: Int, where: JSON): [Product]
}

type CollectionConnection {
  values: [Collection]
  groupBy: CollectionGroupBy
  aggregate: CollectionAggregator
}

type CollectionAggregator {
  count: Int
  totalCount: Int
}

type CollectionGroupBy {
  id: [CollectionConnectionId]
  created_at: [CollectionConnectionCreated_at]
  updated_at: [CollectionConnectionUpdated_at]
  name: [CollectionConnectionName]
  slug: [CollectionConnectionSlug]
}

type CollectionConnectionId {
  key: ID
  connection: CollectionConnection
}

type CollectionConnectionCreated_at {
  key: DateTime
  connection: CollectionConnection
}

type CollectionConnectionUpdated_at {
  key: DateTime
  connection: CollectionConnection
}

type CollectionConnectionName {
  key: String
  connection: CollectionConnection
}

type CollectionConnectionSlug {
  key: String
  connection: CollectionConnection
}

input CollectionInput {
  name: String
  slug: String
  products: [ID]
  created_by: ID
  updated_by: ID
}

input editCollectionInput {
  name: String
  slug: String
  products: [ID]
  created_by: ID
  updated_by: ID
}

input createCollectionInput {
  data: CollectionInput
}

type createCollectionPayload {
  collection: Collection
}

input updateCollectionInput {
  where: InputID
  data: editCollectionInput
}

type updateCollectionPayload {
  collection: Collection
}

input deleteCollectionInput {
  where: InputID
}

type deleteCollectionPayload {
  collection: Collection
}

type PostCategory {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  slug: String
  posts(sort: String, limit: Int, start: Int, where: JSON): [Post]
}

type PostCategoryConnection {
  values: [PostCategory]
  groupBy: PostCategoryGroupBy
  aggregate: PostCategoryAggregator
}

type PostCategoryAggregator {
  count: Int
  totalCount: Int
}

type PostCategoryGroupBy {
  id: [PostCategoryConnectionId]
  created_at: [PostCategoryConnectionCreated_at]
  updated_at: [PostCategoryConnectionUpdated_at]
  name: [PostCategoryConnectionName]
  slug: [PostCategoryConnectionSlug]
}

type PostCategoryConnectionId {
  key: ID
  connection: PostCategoryConnection
}

type PostCategoryConnectionCreated_at {
  key: DateTime
  connection: PostCategoryConnection
}

type PostCategoryConnectionUpdated_at {
  key: DateTime
  connection: PostCategoryConnection
}

type PostCategoryConnectionName {
  key: String
  connection: PostCategoryConnection
}

type PostCategoryConnectionSlug {
  key: String
  connection: PostCategoryConnection
}

input PostCategoryInput {
  name: String
  slug: String
  posts: [ID]
  created_by: ID
  updated_by: ID
}

input editPostCategoryInput {
  name: String
  slug: String
  posts: [ID]
  created_by: ID
  updated_by: ID
}

input createPostCategoryInput {
  data: PostCategoryInput
}

type createPostCategoryPayload {
  postCategory: PostCategory
}

input updatePostCategoryInput {
  where: InputID
  data: editPostCategoryInput
}

type updatePostCategoryPayload {
  postCategory: PostCategory
}

input deletePostCategoryInput {
  where: InputID
}

type deletePostCategoryPayload {
  postCategory: PostCategory
}

type Post {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  slug: String
  short_description: String
  thumbnail: UploadFile
  content: String
  post_categories(sort: String, limit: Int, start: Int, where: JSON): [PostCategory]
}

type PostConnection {
  values: [Post]
  groupBy: PostGroupBy
  aggregate: PostAggregator
}

type PostAggregator {
  count: Int
  totalCount: Int
}

type PostGroupBy {
  id: [PostConnectionId]
  created_at: [PostConnectionCreated_at]
  updated_at: [PostConnectionUpdated_at]
  name: [PostConnectionName]
  slug: [PostConnectionSlug]
  short_description: [PostConnectionShort_description]
  thumbnail: [PostConnectionThumbnail]
  content: [PostConnectionContent]
}

type PostConnectionId {
  key: ID
  connection: PostConnection
}

type PostConnectionCreated_at {
  key: DateTime
  connection: PostConnection
}

type PostConnectionUpdated_at {
  key: DateTime
  connection: PostConnection
}

type PostConnectionName {
  key: String
  connection: PostConnection
}

type PostConnectionSlug {
  key: String
  connection: PostConnection
}

type PostConnectionShort_description {
  key: String
  connection: PostConnection
}

type PostConnectionThumbnail {
  key: ID
  connection: PostConnection
}

type PostConnectionContent {
  key: String
  connection: PostConnection
}

input PostInput {
  name: String
  slug: String
  short_description: String
  thumbnail: ID
  post_categories: [ID]
  content: String
  created_by: ID
  updated_by: ID
}

input editPostInput {
  name: String
  slug: String
  short_description: String
  thumbnail: ID
  post_categories: [ID]
  content: String
  created_by: ID
  updated_by: ID
}

input createPostInput {
  data: PostInput
}

type createPostPayload {
  post: Post
}

input updatePostInput {
  where: InputID
  data: editPostInput
}

type updatePostPayload {
  post: Post
}

input deletePostInput {
  where: InputID
}

type deletePostPayload {
  post: Post
}

type ProductCategories {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  slug: String
  products(sort: String, limit: Int, start: Int, where: JSON): [Product]
}

type ProductCategoriesConnection {
  values: [ProductCategories]
  groupBy: ProductCategoriesGroupBy
  aggregate: ProductCategoriesAggregator
}

type ProductCategoriesAggregator {
  count: Int
  totalCount: Int
}

type ProductCategoriesGroupBy {
  id: [ProductCategoriesConnectionId]
  created_at: [ProductCategoriesConnectionCreated_at]
  updated_at: [ProductCategoriesConnectionUpdated_at]
  name: [ProductCategoriesConnectionName]
  slug: [ProductCategoriesConnectionSlug]
}

type ProductCategoriesConnectionId {
  key: ID
  connection: ProductCategoriesConnection
}

type ProductCategoriesConnectionCreated_at {
  key: DateTime
  connection: ProductCategoriesConnection
}

type ProductCategoriesConnectionUpdated_at {
  key: DateTime
  connection: ProductCategoriesConnection
}

type ProductCategoriesConnectionName {
  key: String
  connection: ProductCategoriesConnection
}

type ProductCategoriesConnectionSlug {
  key: String
  connection: ProductCategoriesConnection
}

input ProductCategoryInput {
  name: String
  slug: String
  products: [ID]
  created_by: ID
  updated_by: ID
}

input editProductCategoryInput {
  name: String
  slug: String
  products: [ID]
  created_by: ID
  updated_by: ID
}

input createProductCategoryInput {
  data: ProductCategoryInput
}

type createProductCategoryPayload {
  productCategory: ProductCategories
}

input updateProductCategoryInput {
  where: InputID
  data: editProductCategoryInput
}

type updateProductCategoryPayload {
  productCategory: ProductCategories
}

input deleteProductCategoryInput {
  where: InputID
}

type deleteProductCategoryPayload {
  productCategory: ProductCategories
}

type Product {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  title: String
  is_featured: Boolean
  is_hot: Boolean
  price: Float
  sale_price: Float
  vendor: String
  review: Int
  is_out_of_stock: Boolean
  depot: Int
  inventory: Int
  variants: [ComponentVariantsVariants]
  is_active: Boolean
  is_sale: Boolean
  thumbnail: UploadFile
  slug: String
  product_categories(sort: String, limit: Int, start: Int, where: JSON): [ProductCategories]
  images(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  brands(sort: String, limit: Int, start: Int, where: JSON): [Brand]
  collections(sort: String, limit: Int, start: Int, where: JSON): [Collection]
  stores(sort: String, limit: Int, start: Int, where: JSON): [Store]
}

type ProductConnection {
  values: [Product]
  groupBy: ProductGroupBy
  aggregate: ProductAggregator
}

type ProductAggregator {
  count: Int
  totalCount: Int
  sum: ProductAggregatorSum
  avg: ProductAggregatorAvg
  min: ProductAggregatorMin
  max: ProductAggregatorMax
}

type ProductAggregatorSum {
  price: Float
  sale_price: Float
  review: Float
  depot: Float
  inventory: Float
}

type ProductAggregatorAvg {
  price: Float
  sale_price: Float
  review: Float
  depot: Float
  inventory: Float
}

type ProductAggregatorMin {
  price: Float
  sale_price: Float
  review: Float
  depot: Float
  inventory: Float
}

type ProductAggregatorMax {
  price: Float
  sale_price: Float
  review: Float
  depot: Float
  inventory: Float
}

type ProductGroupBy {
  id: [ProductConnectionId]
  created_at: [ProductConnectionCreated_at]
  updated_at: [ProductConnectionUpdated_at]
  title: [ProductConnectionTitle]
  is_featured: [ProductConnectionIs_featured]
  is_hot: [ProductConnectionIs_hot]
  price: [ProductConnectionPrice]
  sale_price: [ProductConnectionSale_price]
  vendor: [ProductConnectionVendor]
  review: [ProductConnectionReview]
  is_out_of_stock: [ProductConnectionIs_out_of_stock]
  depot: [ProductConnectionDepot]
  inventory: [ProductConnectionInventory]
  is_active: [ProductConnectionIs_active]
  is_sale: [ProductConnectionIs_sale]
  thumbnail: [ProductConnectionThumbnail]
  slug: [ProductConnectionSlug]
}

type ProductConnectionId {
  key: ID
  connection: ProductConnection
}

type ProductConnectionCreated_at {
  key: DateTime
  connection: ProductConnection
}

type ProductConnectionUpdated_at {
  key: DateTime
  connection: ProductConnection
}

type ProductConnectionTitle {
  key: String
  connection: ProductConnection
}

type ProductConnectionIs_featured {
  key: Boolean
  connection: ProductConnection
}

type ProductConnectionIs_hot {
  key: Boolean
  connection: ProductConnection
}

type ProductConnectionPrice {
  key: Float
  connection: ProductConnection
}

type ProductConnectionSale_price {
  key: Float
  connection: ProductConnection
}

type ProductConnectionVendor {
  key: String
  connection: ProductConnection
}

type ProductConnectionReview {
  key: Int
  connection: ProductConnection
}

type ProductConnectionIs_out_of_stock {
  key: Boolean
  connection: ProductConnection
}

type ProductConnectionDepot {
  key: Int
  connection: ProductConnection
}

type ProductConnectionInventory {
  key: Int
  connection: ProductConnection
}

type ProductConnectionIs_active {
  key: Boolean
  connection: ProductConnection
}

type ProductConnectionIs_sale {
  key: Boolean
  connection: ProductConnection
}

type ProductConnectionThumbnail {
  key: ID
  connection: ProductConnection
}

type ProductConnectionSlug {
  key: String
  connection: ProductConnection
}

input ProductInput {
  title: String
  product_categories: [ID]
  images: [ID]
  is_featured: Boolean
  is_hot: Boolean
  price: Float
  sale_price: Float
  vendor: String
  brands: [ID]
  review: Int
  is_out_of_stock: Boolean
  depot: Int
  inventory: Int
  variants: [ComponentVariantsVariantInput]
  is_active: Boolean
  is_sale: Boolean
  thumbnail: ID
  collections: [ID]
  slug: String
  stores: [ID]
  created_by: ID
  updated_by: ID
}

input editProductInput {
  title: String
  product_categories: [ID]
  images: [ID]
  is_featured: Boolean
  is_hot: Boolean
  price: Float
  sale_price: Float
  vendor: String
  brands: [ID]
  review: Int
  is_out_of_stock: Boolean
  depot: Int
  inventory: Int
  variants: [editComponentVariantsVariantInput]
  is_active: Boolean
  is_sale: Boolean
  thumbnail: ID
  collections: [ID]
  slug: String
  stores: [ID]
  created_by: ID
  updated_by: ID
}

input createProductInput {
  data: ProductInput
}

type createProductPayload {
  product: Product
}

input updateProductInput {
  where: InputID
  data: editProductInput
}

type updateProductPayload {
  product: Product
}

input deleteProductInput {
  where: InputID
}

type deleteProductPayload {
  product: Product
}

type Promotions {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  slug: String
  items: [ComponentItemsItems]
}

type PromotionsConnection {
  values: [Promotions]
  groupBy: PromotionsGroupBy
  aggregate: PromotionsAggregator
}

type PromotionsAggregator {
  count: Int
  totalCount: Int
}

type PromotionsGroupBy {
  id: [PromotionsConnectionId]
  created_at: [PromotionsConnectionCreated_at]
  updated_at: [PromotionsConnectionUpdated_at]
  name: [PromotionsConnectionName]
  slug: [PromotionsConnectionSlug]
}

type PromotionsConnectionId {
  key: ID
  connection: PromotionsConnection
}

type PromotionsConnectionCreated_at {
  key: DateTime
  connection: PromotionsConnection
}

type PromotionsConnectionUpdated_at {
  key: DateTime
  connection: PromotionsConnection
}

type PromotionsConnectionName {
  key: String
  connection: PromotionsConnection
}

type PromotionsConnectionSlug {
  key: String
  connection: PromotionsConnection
}

input PromotionInput {
  name: String
  slug: String
  items: [ComponentItemsItemInput]
  created_by: ID
  updated_by: ID
}

input editPromotionInput {
  name: String
  slug: String
  items: [editComponentItemsItemInput]
  created_by: ID
  updated_by: ID
}

input createPromotionInput {
  data: PromotionInput
}

type createPromotionPayload {
  promotion: Promotions
}

input updatePromotionInput {
  where: InputID
  data: editPromotionInput
}

type updatePromotionPayload {
  promotion: Promotions
}

input deletePromotionInput {
  where: InputID
}

type deletePromotionPayload {
  promotion: Promotions
}

type Store {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String
  slug: String
  address: String
  phone: String
  thumbnail: UploadFile
  products(sort: String, limit: Int, start: Int, where: JSON): [Product]
}

type StoreConnection {
  values: [Store]
  groupBy: StoreGroupBy
  aggregate: StoreAggregator
}

type StoreAggregator {
  count: Int
  totalCount: Int
}

type StoreGroupBy {
  id: [StoreConnectionId]
  created_at: [StoreConnectionCreated_at]
  updated_at: [StoreConnectionUpdated_at]
  name: [StoreConnectionName]
  slug: [StoreConnectionSlug]
  address: [StoreConnectionAddress]
  phone: [StoreConnectionPhone]
  thumbnail: [StoreConnectionThumbnail]
}

type StoreConnectionId {
  key: ID
  connection: StoreConnection
}

type StoreConnectionCreated_at {
  key: DateTime
  connection: StoreConnection
}

type StoreConnectionUpdated_at {
  key: DateTime
  connection: StoreConnection
}

type StoreConnectionName {
  key: String
  connection: StoreConnection
}

type StoreConnectionSlug {
  key: String
  connection: StoreConnection
}

type StoreConnectionAddress {
  key: String
  connection: StoreConnection
}

type StoreConnectionPhone {
  key: String
  connection: StoreConnection
}

type StoreConnectionThumbnail {
  key: ID
  connection: StoreConnection
}

input StoreInput {
  name: String
  slug: String
  address: String
  phone: String
  products: [ID]
  thumbnail: ID
  created_by: ID
  updated_by: ID
}

input editStoreInput {
  name: String
  slug: String
  address: String
  phone: String
  products: [ID]
  thumbnail: ID
  created_by: ID
  updated_by: ID
}

input createStoreInput {
  data: StoreInput
}

type createStorePayload {
  store: Store
}

input updateStoreInput {
  where: InputID
  data: editStoreInput
}

type updateStorePayload {
  store: Store
}

input deleteStoreInput {
  where: InputID
}

type deleteStorePayload {
  store: Store
}

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  provider: [UsersPermissionsUserConnectionProvider]
  confirmed: [UsersPermissionsUserConnectionConfirmed]
  blocked: [UsersPermissionsUserConnectionBlocked]
  role: [UsersPermissionsUserConnectionRole]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionProvider {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionConfirmed {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionBlocked {
  key: Boolean
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type ComponentItemsItems {
  id: ID!
  name: String
  slug: String
  image: UploadFile
  link: String
}

input ComponentItemsItemInput {
  name: String
  slug: String
  image: ID
  link: String
}

input editComponentItemsItemInput {
  id: ID
  name: String
  slug: String
  image: ID
  link: String
}

type ComponentProductSizeSizes {
  id: ID!
  name: String
  character: String
}

input ComponentProductSizeSizeInput {
  name: String
  character: String
}

input editComponentProductSizeSizeInput {
  id: ID
  name: String
  character: String
}

type ComponentVariantsItems {
  id: ID!
  isImage: Boolean
  image: UploadFile
  title: String
  desc: String
  btn_text: String
  desc_hightlight: String
  text_on_top: String
}

input ComponentVariantsItemInput {
  isImage: Boolean
  image: ID
  title: String
  desc: String
  btn_text: String
  desc_hightlight: String
  text_on_top: String
}

input editComponentVariantsItemInput {
  id: ID
  isImage: Boolean
  image: ID
  title: String
  desc: String
  btn_text: String
  desc_hightlight: String
  text_on_top: String
}

type ComponentVariantsVariants {
  id: ID!
  price: Float
  sale_price: Float
  thumbnail: UploadFile
  name: String
  sizes: [ComponentProductSizeSizes]
  is_sale: Boolean
  images(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

input ComponentVariantsVariantInput {
  images: [ID]
  price: Float
  sale_price: Float
  thumbnail: ID
  name: String
  sizes: [ComponentProductSizeSizeInput]
  is_sale: Boolean
}

input editComponentVariantsVariantInput {
  id: ID
  images: [ID]
  price: Float
  sale_price: Float
  thumbnail: ID
  name: String
  sizes: [editComponentProductSizeSizeInput]
  is_sale: Boolean
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | Banner | BannerConnection | BannerAggregator | BannerGroupBy | BannerConnectionId | BannerConnectionCreated_at | BannerConnectionUpdated_at | BannerConnectionSlug | BannerConnectionName | createBannerPayload | updateBannerPayload | deleteBannerPayload | Brand | BrandConnection | BrandAggregator | BrandGroupBy | BrandConnectionId | BrandConnectionCreated_at | BrandConnectionUpdated_at | BrandConnectionName | BrandConnectionSlug | createBrandPayload | updateBrandPayload | deleteBrandPayload | Collection | CollectionConnection | CollectionAggregator | CollectionGroupBy | CollectionConnectionId | CollectionConnectionCreated_at | CollectionConnectionUpdated_at | CollectionConnectionName | CollectionConnectionSlug | createCollectionPayload | updateCollectionPayload | deleteCollectionPayload | PostCategory | PostCategoryConnection | PostCategoryAggregator | PostCategoryGroupBy | PostCategoryConnectionId | PostCategoryConnectionCreated_at | PostCategoryConnectionUpdated_at | PostCategoryConnectionName | PostCategoryConnectionSlug | createPostCategoryPayload | updatePostCategoryPayload | deletePostCategoryPayload | Post | PostConnection | PostAggregator | PostGroupBy | PostConnectionId | PostConnectionCreated_at | PostConnectionUpdated_at | PostConnectionName | PostConnectionSlug | PostConnectionShort_description | PostConnectionThumbnail | PostConnectionContent | createPostPayload | updatePostPayload | deletePostPayload | ProductCategories | ProductCategoriesConnection | ProductCategoriesAggregator | ProductCategoriesGroupBy | ProductCategoriesConnectionId | ProductCategoriesConnectionCreated_at | ProductCategoriesConnectionUpdated_at | ProductCategoriesConnectionName | ProductCategoriesConnectionSlug | createProductCategoryPayload | updateProductCategoryPayload | deleteProductCategoryPayload | Product | ProductConnection | ProductAggregator | ProductAggregatorSum | ProductAggregatorAvg | ProductAggregatorMin | ProductAggregatorMax | ProductGroupBy | ProductConnectionId | ProductConnectionCreated_at | ProductConnectionUpdated_at | ProductConnectionTitle | ProductConnectionIs_featured | ProductConnectionIs_hot | ProductConnectionPrice | ProductConnectionSale_price | ProductConnectionVendor | ProductConnectionReview | ProductConnectionIs_out_of_stock | ProductConnectionDepot | ProductConnectionInventory | ProductConnectionIs_active | ProductConnectionIs_sale | ProductConnectionThumbnail | ProductConnectionSlug | createProductPayload | updateProductPayload | deleteProductPayload | Promotions | PromotionsConnection | PromotionsAggregator | PromotionsGroupBy | PromotionsConnectionId | PromotionsConnectionCreated_at | PromotionsConnectionUpdated_at | PromotionsConnectionName | PromotionsConnectionSlug | createPromotionPayload | updatePromotionPayload | deletePromotionPayload | Store | StoreConnection | StoreAggregator | StoreGroupBy | StoreConnectionId | StoreConnectionCreated_at | StoreConnectionUpdated_at | StoreConnectionName | StoreConnectionSlug | StoreConnectionAddress | StoreConnectionPhone | StoreConnectionThumbnail | createStorePayload | updateStorePayload | deleteStorePayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionProvider | UsersPermissionsUserConnectionConfirmed | UsersPermissionsUserConnectionBlocked | UsersPermissionsUserConnectionRole | createUserPayload | updateUserPayload | deleteUserPayload | ComponentItemsItems | ComponentProductSizeSizes | ComponentVariantsItems | ComponentVariantsVariants

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  banner(id: ID!, publicationState: PublicationState): Banner
  banners(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Banner]
  bannersConnection(sort: String, limit: Int, start: Int, where: JSON): BannerConnection
  brand(id: ID!, publicationState: PublicationState): Brand
  brands(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Brand]
  brandsConnection(sort: String, limit: Int, start: Int, where: JSON): BrandConnection
  collection(id: ID!, publicationState: PublicationState): Collection
  collections(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Collection]
  collectionsConnection(sort: String, limit: Int, start: Int, where: JSON): CollectionConnection
  postCategory(id: ID!, publicationState: PublicationState): PostCategory
  postCategories(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [PostCategory]
  postCategoriesConnection(sort: String, limit: Int, start: Int, where: JSON): PostCategoryConnection
  post(id: ID!, publicationState: PublicationState): Post
  posts(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Post]
  postsConnection(sort: String, limit: Int, start: Int, where: JSON): PostConnection
  productCategory(id: ID!, publicationState: PublicationState): ProductCategories
  productCategories(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [ProductCategories]
  productCategoriesConnection(sort: String, limit: Int, start: Int, where: JSON): ProductCategoriesConnection
  product(id: ID!, publicationState: PublicationState): Product
  products(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Product]
  productsConnection(sort: String, limit: Int, start: Int, where: JSON): ProductConnection
  promotion(id: ID!, publicationState: PublicationState): Promotions
  promotions(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Promotions]
  promotionsConnection(sort: String, limit: Int, start: Int, where: JSON): PromotionsConnection
  store(id: ID!, publicationState: PublicationState): Store
  stores(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [Store]
  storesConnection(sort: String, limit: Int, start: Int, where: JSON): StoreConnection
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Mutation {
  createBanner(input: createBannerInput): createBannerPayload
  updateBanner(input: updateBannerInput): updateBannerPayload
  deleteBanner(input: deleteBannerInput): deleteBannerPayload
  createBrand(input: createBrandInput): createBrandPayload
  updateBrand(input: updateBrandInput): updateBrandPayload
  deleteBrand(input: deleteBrandInput): deleteBrandPayload
  createCollection(input: createCollectionInput): createCollectionPayload
  updateCollection(input: updateCollectionInput): updateCollectionPayload
  deleteCollection(input: deleteCollectionInput): deleteCollectionPayload
  createPostCategory(input: createPostCategoryInput): createPostCategoryPayload
  updatePostCategory(input: updatePostCategoryInput): updatePostCategoryPayload
  deletePostCategory(input: deletePostCategoryInput): deletePostCategoryPayload
  createPost(input: createPostInput): createPostPayload
  updatePost(input: updatePostInput): updatePostPayload
  deletePost(input: deletePostInput): deletePostPayload
  createProductCategory(input: createProductCategoryInput): createProductCategoryPayload
  updateProductCategory(input: updateProductCategoryInput): updateProductCategoryPayload
  deleteProductCategory(input: deleteProductCategoryInput): deleteProductCategoryPayload
  createProduct(input: createProductInput): createProductPayload
  updateProduct(input: updateProductInput): updateProductPayload
  deleteProduct(input: deleteProductInput): deleteProductPayload
  createPromotion(input: createPromotionInput): createPromotionPayload
  updatePromotion(input: updatePromotionInput): updatePromotionPayload
  deletePromotion(input: deletePromotionInput): deletePromotionPayload
  createStore(input: createStoreInput): createStorePayload
  updateStore(input: updateStoreInput): updateStorePayload
  deleteStore(input: deleteStoreInput): deleteStorePayload

  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
